using System;
using System.Text;
using System.Numerics;
using System.Windows.Forms;
using System.Collections.Generic;

namespace DSA
{
    public partial class Program : Form
    {
        public Program()
        {
            InitializeComponent();
        }

        private void Program_Load(object sender, EventArgs e) {}

        private void label1_Click(object sender, EventArgs e) {}

        private void label2_Click(object sender, EventArgs e) {}

        private void richTextBox1_TextChanged(object sender, EventArgs e) {}

        private void richTextBox2_TextChanged(object sender, EventArgs e) {}

        private void button1_Click(object sender, EventArgs e)
        {
            (string set_p, string set_q) = RandomSet();

            BigInteger P = CreateBigInteger(set_p), Q = CreateBigInteger(set_q);

            DSA qwerty = new DSA(P, Q);
            (BigInteger s1, BigInteger s2) = qwerty.GenerateDigitalSignature(Encoding.UTF8.GetBytes(richTextBox1.Text));

            richTextBox2.Text = s1 + " " + s2 + " " + DSA.p + " " + DSA.q + " " + DSA.h + " " + DSA.b;

            MessageBox.Show("Wygenerowano sygnaturę!");
        }

        private void button2_Click(object sender, EventArgs e)
        {
            string[] input = richTextBox2.Text.Split(' ');
            BigInteger[] keys = new BigInteger[6];

            for(int i = 0; i < input.Length && i < 6; i++)
            {
                keys[i] = CreateBigInteger(input[i]);
            }

            if (keys[2] != 0 && keys[3] != 0 && keys[4] != 0 && keys[5] != 0 && input.Length == 6)
            {
                DSA qwerty = new DSA(keys[2], keys[3], keys[4], keys[5]);
                bool isCorrect = qwerty.VerifyDigitalSignature(Encoding.UTF8.GetBytes(richTextBox1.Text), (keys[0], keys[1]));

                if (isCorrect)
                    MessageBox.Show("Zweryfikowano sygnaturę!");

                else
                    MessageBox.Show("Sygnatura nie zgadza się!");
            }

            else
                MessageBox.Show("Sygnatura nie zgadza się!");
        }

        private void button3_Click(object sender, EventArgs e)
        {
            openFileDialog1.FileName = "";
            openFileDialog1.ShowDialog();

            if (openFileDialog1.FileName != "")
            {
                System.IO.Stream file = openFileDialog1.OpenFile();

                List<byte> input = new List<byte>();

                while (file.Position < file.Length)
                    input.Add((byte)file.ReadByte());

                (string set_p, string set_q) = RandomSet();

                BigInteger P = CreateBigInteger(set_p), Q = CreateBigInteger(set_q);

                DSA qwerty = new DSA(P, Q);
                (BigInteger s1, BigInteger s2) = qwerty.GenerateDigitalSignature(input.ToArray());

                string result = s1 + " " + s2 + " " + DSA.p + " " + DSA.q + " " + DSA.h + " " + DSA.b;
                byte[] output = Encoding.UTF8.GetBytes(result);

                file.Dispose();
                file.Close();

                saveFileDialog1.FileName = "";
                saveFileDialog1.ShowDialog();

                if (saveFileDialog1.FileName != "")
                {
                    file = saveFileDialog1.OpenFile();

                    for (int i = 0; i < output.Length; i++)
                        file.WriteByte(output[i]);

                    file.Dispose();
                    file.Close();

                    MessageBox.Show("Wygenerowano sygnaturę!");
                }

                else
                    MessageBox.Show("Nie wybrano pliku do zapisu!");
            }

            else
                MessageBox.Show("Nie wybrano pliku do odczytu!");
        }

        private void button4_Click(object sender, EventArgs e)
        {
            openFileDialog1.FileName = "";
            openFileDialog1.ShowDialog();

            if (openFileDialog1.FileName != "")
            {
                openFileDialog2.FileName = "";
                openFileDialog2.ShowDialog();

                if (openFileDialog2.FileName != "")
                {
                    System.IO.Stream file = openFileDialog1.OpenFile();
                    System.IO.Stream fileSignature = openFileDialog2.OpenFile();

                    List<byte> input = new List<byte>();

                    while (fileSignature.Position < fileSignature.Length)
                        input.Add((byte)fileSignature.ReadByte());

                    string[] data = Encoding.UTF8.GetString(input.ToArray()).Split(' ');

                    BigInteger[] keys = new BigInteger[6];

                    for (int i = 0; i < data.Length && i < 6; i++)
                    {
                        keys[i] = CreateBigInteger(data[i]);
                    }

                    if (keys[2] != 0 && keys[3] != 0 && keys[4] != 0 && keys[5] != 0 && data.Length == 6)
                    {
                        List<byte> text = new List<byte>();

                        while (file.Position < file.Length)
                            text.Add((byte)file.ReadByte());

                        DSA qwerty = new DSA(keys[2], keys[3], keys[4], keys[5]);
                        bool isCorrect = qwerty.VerifyDigitalSignature(text.ToArray(), (keys[0], keys[1]));

                        if (isCorrect)
                            MessageBox.Show("Zweryfikowano sygnaturę!");

                        else
                            MessageBox.Show("Sygnatura nie zgadza się!");
                    }

                    else
                        MessageBox.Show("Sygnatura nie zgadza się!");

                    fileSignature.Dispose();
                    fileSignature.Close();

                    file.Dispose();
                    file.Close();
                }

                else
                    MessageBox.Show("Nie wybrano pliku z sygnaturą!");
            }

            else
                MessageBox.Show("Nie wybrano pliku do odczytu!");
        }

        static BigInteger CreateBigInteger(string source)
        {
            BigInteger result = 0;

            for (int i = source.Length - 1, k = 0; i >= 0; i--)
                result += BigInteger.Pow(10, k++) * (source[i] - 48);

            return result;
        }

        static (string p, string q) RandomSet()
        {
            string[] P = new string[20], Q = new string[20];

            (P[0], Q[0]) = ("102865584259843077175583195011997798900482038016705824136288380475734860009055428071534495956844807748416572686838253895244634687898659646424515259679129905513743899853971066468883670407530107234961085482225328667572772611162756643027105617873895021996158552984843708233824989792811721408577351617080369547993", "734415599462729831694143846331445277609193755927");
            (P[1], Q[1]) = ("119174297139009370877841564606850626427667918200368284369756464564355229252068794065580129124350147020077434436300916111599920904898959919045935156616902453473096937788547639417460271527028766499290469901206469853517043601644537973668272339595156826752721371012822919167295697861634874788935222483926157434863", "1289233352290115814210005730521570412018870172097");
            (P[2], Q[2]) = ("134817967760857251083091908808237962017482713844799722953089518962693778570152997294237265465413036606356189913801618361602427588370470499932227099199778909559131429935432859124054984778527660688262088658361996403500509636524921920207217059425908425049963010937149633594375711992722605096742045534115733045093", "1118933897976500818185453224422388072896302093223");
            (P[3], Q[3]) = ("161351704885458965278788472060670148300723543027031691757065683720054217442496440839575872264256253197418922661515902603175652647544705418952159957508525007531958848548162685262521240479475930839229330097642208204330971821441564496642135228920222305731157026872131883706249492814002560891875628975803362411589", "1457345316256025228240511116790642743818534253639");
            (P[4], Q[4]) = ("108917080614380666273543848292113378351040722909209758477232975175020680752754060212342231429405288172008759872686217684801620754565490666370929444379581363999854532727800215838326411159373928131011867325003873279351971050279677783675522228073807529390549132653467312311384710678249884784816628986180738023117", "906245838511058668994474157460484857816839543757");
            (P[5], Q[5]) = ("105959599604137102405271737497944138182718957920429991780937650318959633955142939432516122285093538557386274705594990093837105507663164028970093967040719052379122948029748157867702667436245168370832141551514917223273834471940360845189553832707347691805320305681609895611818451709599296691424701960082521395119", "864963225871957339296991066604082513009716215411");
            (P[6], Q[6]) = ("154376852798991512466450184911857151525477801612742801195544224280321834546180758809263796880059658064878719926337169735461727402809426765669791406922170232745542930719943637834054854129097834647966524325955656354997067397883889886400924059312394996893195886233458849876482862828615259196386318108512950405207", "1301273725419351683092291888455947123343211280579");
            (P[7], Q[7]) = ("94184133145635471007634951582485876077202823067980983256900042090166007906927918943740745674724532420861188985551373919778228547175400823079696911711073886625336116670014058886326213969303402812692237748953912490645031472567428543720844153842291047296533152749851228129444138117453133449301800316967383656781", "1222246335019563917869862588147973815633625555641");
            (P[8], Q[8]) = ("127671633729384161637542329970872688139598523488164051943482606428892896846650635640477941456613994838531421198779130099091846608407209362691790929774799804497862644727971580441498902210379848904167500924077135876646033344602629173715726978986451269055796499151067755338330954054056087502289508115477694298609", "976827742233733406745980433815257185012338781053");
            (P[9], Q[9]) = ("152464991683158376484730803872389834028412558144520731059699944591840254633755768783119551293889623603487389508318404650009014093899788426857556007560367421264452498667172944452863963947377513399461705873980800657586962080800253202989821972711759452959298670270525260726285977696413927933703215048860272933757", "1427533830453266978539247619184347464935952324911");
            (P[10], Q[10]) = ("121369006837518590338913530837158940194544301908841837234588875231100494001344137480055831324994946009248537461495923744383707393290009462170414723118521977466519915801372310409690684559355474360666561006358853990699899772811386517997886846022675316688064024561000993624548951855585079971530826084585302041653", "1387473514528813607347560449294552130477893468369");
            (P[11], Q[11]) = ("173098279449542955562296302256090682206417238724161045851784052516589741439994393518418634488725226614233400023365417695525048206437748011497533020371237737658622628369174161229575324151437748777829196404391114099803608529186178501864839333126175164575800810691918247991260511291020036682582461802897261440121", "1140612843327322985112936313322203679559153115369");
            (P[12], Q[12]) = ("147285135251437051261432345120171369356642614906837093896724641020683853544187287200541816993703391628903238360045674737926762959819663968891848200318363560305728248150139649128116459002708446400268867712576250538979528519590694624837832310435441031822198652659300678385435544691318813534992974161069595980063", "869245754745214880163177652864940601091499970727");
            (P[13], Q[13]) = ("89929432544510430800649355401630006700189176413237584319582563536131471417042848393883576486628954130781548837034443904676522660200395790602510344994308909556082232373012869590476249745059440836002729388264899375941834336343955103938365294726569793904798431871490309687125339105470066895165145554777271225097", "914414607018760473772560388026902870376619205183");
            (P[14], Q[14]) = ("105084083145898798873069827123888657329162507143872787797739295820489362409987580654622259019086648705304734933784156438716378894879163764176327080340172624186523723332513481753311524860904753983151680653086809908200179882676249382378822981166640243147714751352610278485957835948490764363322497908174689370667", "850326976129621107440671454776338528111504720463");
            (P[15], Q[15]) = ("173286609874411805435553635596726897397309215416201683755052174979173892558795422475423892399868963485301595752410603682025182835764606687781853968806048205429698257163475955970103083187944648512671532152782646993356627515299120517227481312562054469898545637430155126175704572369795070643900387873562894258013", "967290507806126919381884290683673645318099125163");
            (P[16], Q[16]) = ("163921968509668377457902087910540946468511135608049208321287560327577492888653080929769552965287445789548797184869019009075072066992242437272393334000002359506464918721701946531949179516848374092286532576537565650819362132229555204967942440376275088995524558135264737100500018030963383339804732255454284808603", "890621478538379243082896887047436502707555681439");
            (P[17], Q[17]) = ("104683618824759349657806704030507630081521754338140071459014077528574854234814071211535633873077927752223938430016259016224432422147192370107670663388723306944738871093554547712147591846057612487480322336743576772057484994489564658032112032815040646837387870985183006128122559334851444952318104621716867484819", "1260357622582397261056097940237557332152231276013");
            (P[18], Q[18]) = ("102518829900765745860934993374249330814096582788071968644353584016349740465308308951234336431574146324583506018089580464449709103986549914231808499341534067095556952128095544769796727892175128295809486557226503634930164742126001259922464082274954234505974440451875998345972484470211389624983930908141431979461", "1301693504842641636772644189210628829972019222049");
            (P[19], Q[19]) = ("154364913070409469817891723422046012018631738491019172156966014667095721623508133453865854567306268477054439103446864545126669927327383651892882453148511567635862506619740363253877730433745477746098144016165165600818783587805821385718370049442375742573287679160166996730306775135186685019768245162237832055907", "1003267323980726338236790079037316286300749312091");

            Random XD = new Random(DateTime.Now.Millisecond);
            int index = XD.Next(0, 20);

            return (P[index], Q[index]);
        }
    }
}
